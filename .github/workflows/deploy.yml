name: Deploy Supabase Edge Function

on:
  push:
    branches: [ main ]  # change if your default branch is different

jobs:
  deploy:
    runs-on: ubuntu-latest

    # Pull values from Secrets first; if not present, fall back to Variables
    env:
      PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_ID || vars.SUPABASE_PROJECT_ID }}
      ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN || vars.SUPABASE_ACCESS_TOKEN }}
      SB_URL: ${{ secrets.SUPABASE_URL || vars.SUPABASE_URL }}
      SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY || vars.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Validate required inputs
        run: |
          set -e
          [ -n "$PROJECT_REF" ] || { echo "::error::SUPABASE_PROJECT_ID missing (set as a Secret or Variable)"; exit 1; }
          [ -n "$ACCESS_TOKEN" ] || { echo "::error::SUPABASE_ACCESS_TOKEN missing (set as a Secret or Variable)"; exit 1; }
          echo "Project ref length: ${#PROJECT_REF}"  # diagnostic

      # Optional: push function secrets into Supabase (skip if you prefer dashboard)
      - name: Set Function Secrets (optional)
        if: ${{ env.SB_URL != '' && env.SERVICE_ROLE != '' }}
        run: |
          supabase secrets set \
            SUPABASE_URL="$SB_URL" \
            SUPABASE_SERVICE_ROLE_KEY="$SERVICE_ROLE" \
            --project-ref "$PROJECT_REF"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}

      - name: Deploy Edge Function
        run: supabase functions deploy dynamic-task --project-ref "$PROJECT_REF"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}